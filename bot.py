# ÿ®Ÿêÿ≥ŸíŸÖŸê Ÿ±ŸÑŸÑŸëŸ∞ŸáŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸíŸÖŸ∞ŸÜŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸêŸäŸíŸÖŸê ( BismillƒÅhi r-Ra·∏•mƒÅni r-Ra·∏•ƒ´m )

import asyncio
import traceback
import redis
import pytz
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from database import (
    create_tables, 
    get_user, add_user,
    get_subscribe, add_subscribe, get_active_subscribes, update_subscribe,
    add_payment,
    get_user_settings, update_user_settings
)
from dotenv import load_dotenv
import os

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É .env
env_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '.env'))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv(dotenv_path=env_path)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = redis.Redis(host=os.getenv('REDIS_HOST'), port=os.getenv('REDIS_PORT'), db=os.getenv('REDIS_DB'))

moscow_tz = pytz.timezone('Europe/Moscow')

main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(types.KeyboardButton(text="üîé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"))
main_keyboard.add(types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), types.KeyboardButton(text="üìí FAQ"))

class SettingsStates(StatesGroup):
    usdt_balance = State()
    max_negative_reviews_bestchange = State()
    min_positive_reviews_bestchange = State()
    min_lifetime = State()
    min_spread = State()

async def send_profitable_deals():
    while True:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É profitable_deals:*
        for deal_key in redis_client.keys('profitable_deals:*'):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
            try:
                deal_data = {key.decode('utf-8'): value.decode('utf-8') for key, value in redis_client.hgetall(deal_key).items()}
                if "type" not in deal_data:
                    deal_data = None
            except:
                deal_data = None
            if deal_data:
                users = await get_active_subscribes(datetime.datetime.now(moscow_tz))
                for user in users:
                    user = user["telegram_id"]
                    user_settings = {key.decode('utf-8'): value.decode('utf-8') for key, value in redis_client.hgetall(f'monitoring_{user}').items()}
                    if 'telegram_id' not in user_settings:
                        continue
                    if float(user_settings['min_spread']) > float(deal_data["spread"].replace(" %", "")):
                        continue
                    if deal_data["type"] == 1:
                        if int(user_settings['usdt_balance']) / float(deal_data["bybit_price"]) < float(deal_data["inmin"]):
                            continue
                    elif deal_data["type"] == 2:
                        if int(user_settings['usdt_balance']) < float(deal_data["inmin"]):
                            continue
                    elif deal_data["type"] == 3:
                        if int(user_settings['usdt_balance']) / float(deal_data["bybit_price_0"]) < float(deal_data["inmin"]):
                            continue
                    if int(deal_data["type"]) == 1:
                        text = f"1. ByBit: {' -> '.join(reversed(deal_data['pair'].split('-')))}\n" \
                            + f"–¶–µ–Ω–∞: {deal_data['bybit_price']}\n" \
                            + f"–°–ø–æ—Ç: {deal_data['bybit_url']}\n\n" \
                            + f"""2. Bestchange: {deal_data['pair'].split('-')[0]}{f" {deal_data['network'].split('-')[0]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[0] != '') else ''} -> {deal_data['pair'].split('-')[1]}{f" {deal_data['network'].split('-')[1]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[1] != '') else ''}\n""" \
                            + f"–¶–µ–Ω–∞: {deal_data['bestchange_price']}\n" \
                            + f"""–û–±–º–µ–Ω–Ω–∏–∫: <a href="{deal_data['changer_page']}">{deal_data['changer_name']}</a>\n""" \
                            + f"–†–µ–π—Ç–∏–Ω–≥: {deal_data['changer_rating']}\n" \
                            + f"–°—Å—ã–ª–∫–∞: {deal_data['bestchange_url']}\n" \
                            + f"""–ö –æ—Ç–¥–∞—á–µ: ‚âà {round(int(user_settings['usdt_balance']) / float(deal_data['bybit_price']), 4)} {deal_data['pair'].split('-')[0]}{f" {deal_data['network'].split('-')[0]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[0] != '') else ''}\n""" \
                            + f"""–ö –ø–æ–ª—É—á–µ–Ω–∏—é: ‚âà {round(int(user_settings['usdt_balance']) / float(deal_data['bybit_price']) * float(deal_data['bestchange_price']), 4)} {deal_data['pair'].split('-')[1]}{f" {deal_data['network'].split('-')[1]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[1] != '') else ''}\n\n""" \
                            + f"–°–ø—Ä–µ–¥: {deal_data['spread']}\n" \
                            + f"–ò—Ç–æ–≥–æ: {round(int(user_settings['usdt_balance']) / float(deal_data['bybit_price']) * float(deal_data['bestchange_price']), 4)} {deal_data['pair'].split('-')[1]}"
                    elif int(deal_data["type"]) == 2:
                        text = f"""1. Bestchange: {deal_data['pair'].split('-')[0]}{f" {deal_data['network'].split('-')[0]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[0] != '') else ''} -> {deal_data['pair'].split('-')[1]}{f" {deal_data['network'].split('-')[1]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[1] != '') else ''}\n""" \
                            + f"–¶–µ–Ω–∞: {deal_data['bestchange_price']}\n" \
                            + f"""–û–±–º–µ–Ω–Ω–∏–∫: <a href="{deal_data['changer_page']}">{deal_data['changer_name']}</a>\n""" \
                            + f"–†–µ–π—Ç–∏–Ω–≥: {deal_data['changer_rating']}\n" \
                            + f"–°—Å—ã–ª–∫–∞: {deal_data['bestchange_url']}\n" \
                            + f"""–ö –æ—Ç–¥–∞—á–µ: ‚âà {int(user_settings['usdt_balance'])} {deal_data['pair'].split('-')[0]}{f" {deal_data['network'].split('-')[0]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[0] != '') else ''}\n""" \
                            + f"""–ö –ø–æ–ª—É—á–µ–Ω–∏—é: ‚âà {round(int(user_settings['usdt_balance']) * float(deal_data['bestchange_price']), 4)} {deal_data['pair'].split('-')[1]}{f" {deal_data['network'].split('-')[1]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[1] != '') else ''}\n\n""" \
                            + f"2. ByBit: {' -> '.join(reversed(deal_data['pair'].split('-')))}\n" \
                            + f"–¶–µ–Ω–∞: {deal_data['bybit_price']}\n" \
                            + f"–°–ø–æ—Ç: {deal_data['bybit_url']}\n\n" \
                            + f"–•–µ–¥–∂: https://www.bybit.com/trade/usdt/{''.join(reversed(deal_data['pair'].split('-')))}\n\n" \
                            + f"–°–ø—Ä–µ–¥: {deal_data['spread']}\n" \
                            + f"–ò—Ç–æ–≥–æ: {round(int(user_settings['usdt_balance']) * float(deal_data['bybit_price']) * float(deal_data['bestchange_price']), 4)} {deal_data['pair'].split('-')[0]}"
                    elif int(deal_data["type"]) == 3:
                        text = f"1. ByBit: USDT -> {deal_data['pair'].split('-')[0]}\n" \
                            + f"–¶–µ–Ω–∞: {deal_data['bybit_price_0']}\n" \
                            + f"–°–ø–æ—Ç: {deal_data['bybit_url_0']}\n\n" \
                            + f"""2. Bestchange: {deal_data['pair'].split('-')[0]}{f" {deal_data['network'].split('-')[0]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[0] != '') else ''} -> {deal_data['pair'].split('-')[1]}{f" {deal_data['network'].split('-')[1]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[1] != '') else ''}\n""" \
                            + f"–¶–µ–Ω–∞: {deal_data['bestchange_price']}\n" \
                            + f"""–û–±–º–µ–Ω–Ω–∏–∫: <a href="{deal_data['changer_page']}">{deal_data['changer_name']}</a>\n""" \
                            + f"–†–µ–π—Ç–∏–Ω–≥: {deal_data['changer_rating']}\n" \
                            + f"–°—Å—ã–ª–∫–∞: {deal_data['bestchange_url']}\n" \
                            + f"""–ö –æ—Ç–¥–∞—á–µ: ‚âà {round(int(user_settings['usdt_balance']) / float(deal_data['bybit_price_0']), 4)} {deal_data['pair'].split('-')[0]}{f" {deal_data['network'].split('-')[0]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[0] != '') else ''}\n""" \
                            + f"""–ö –ø–æ–ª—É—á–µ–Ω–∏—é: ‚âà {round(int(user_settings['usdt_balance']) / float(deal_data['bybit_price_0']) * float(deal_data['bestchange_price']), 4)} {deal_data['pair'].split('-')[1]}{f" {deal_data['network'].split('-')[1]}" if ("-" in deal_data['network'] and deal_data['network'].split('-')[1] != '') else ''}\n\n""" \
                            + f"3. ByBit: {deal_data['pair'].split('-')[1]} -> USDT\n" \
                            + f"–¶–µ–Ω–∞: {deal_data['bybit_price_1']}\n" \
                            + f"–°–ø–æ—Ç: {deal_data['bybit_url_1']}\n\n" \
                            + f"–•–µ–¥–∂: https://www.bybit.com/trade/usdt/{deal_data['pair'].split('-')[1]}USDT\nv" \
                            + f"–°–ø—Ä–µ–¥: {deal_data['spread']}\n" \
                            + f"–ò—Ç–æ–≥–æ: {round(int(user_settings['usdt_balance']) / float(deal_data['bybit_price_0']) * float(deal_data['bestchange_price']) * float(deal_data['bybit_price_1']), 4)} USDT"
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id
                    message_id_key = f"message_id_{user}:{deal_key.decode('utf-8').replace('profitable_deals:', '')}"
                    message_id = redis_client.get(message_id_key)
                    if message_id:
                        # –ï—Å–ª–∏ message_id —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await bot.edit_message_text(text=text, chat_id=user, message_id=int(message_id), parse_mode=ParseMode.HTML, disable_web_page_preview=True)
                        except Exception as e:
                            print(f"Error editing message: {e}")
                    else:
                        try:
                            # –ï—Å–ª–∏ message_id –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            sent_message = await bot.send_message(chat_id=user, text=text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ Redis
                            redis_client.set(message_id_key, sent_message.message_id)
                        except Exception as e:
                            print(f"Error sending message: {e}")
                    await asyncio.sleep(1.5)
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        # await asyncio.sleep(int(os.getenv('TIME_TO_UPDATE_MESSAGES_IN_BOT')))

async def delete_profitable_deals():
    while True:
        users = await get_active_subscribes(datetime.datetime.now(moscow_tz) - datetime.timedelta(minutes=5))
        for user in users:
            user = user["telegram_id"]
            for message_id_key in redis_client.keys(f'message_id_{user}:*'):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
                try:
                    deal_data = {key.decode('utf-8'): value.decode('utf-8') for key, value in redis_client.hgetall(f'profitable_deals:{message_id_key.decode("utf-8").replace(f"message_id_{user}:", "")}'.encode("utf-8")).items()}
                    if "type" not in deal_data:
                        deal_data = None
                except:
                    deal_data = None
                    traceback.print_exc()
                if deal_data == None:
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ Redis –∏—Å—á–µ–∑–ª–∏, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_id = redis_client.get(message_id_key)
                    if message_id:
                        try:
                            await bot.delete_message(chat_id=user, message_id=int(message_id))
                            # –£–¥–∞–ª—è–µ–º message_id –∏–∑ Redis
                            redis_client.delete(message_id_key)
                        except Exception as e:
                            print(f"Error deleting message: {e}")
                            if "Message can't be deleted for everyone" in str(e):
                                # –£–¥–∞–ª—è–µ–º message_id –∏–∑ Redis
                                redis_client.delete(message_id_key)

@dp.message_handler(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞", state=SettingsStates)
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.finish()
        await bot.send_message(message.chat.id, f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=main_keyboard)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == 'private':
        await deactivate_monitoring_handler(message)
        moscow_now_date = datetime.datetime.now(moscow_tz)
        user = await get_user(message.from_user.id)
        if user:
            subscribe = await get_subscribe(user["telegram_id"])
            if subscribe["expire_in_datetime"].replace(tzinfo=moscow_tz) > moscow_now_date:
                await bot.send_message(message.from_user.id, f"""üü¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscribe["expire_in_datetime"].strftime('%H:%M %d.%m.%Y')}</b>""", parse_mode=ParseMode.HTML, reply_markup=main_keyboard)
            else:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –∑–∞ üåü", callback_data="go_stars"))
                await bot.send_message(message.from_user.id, f"""üî¥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å {subscribe["expire_in_datetime"].strftime('%H:%M %d.%m.%Y')}</b>""", parse_mode=ParseMode.HTML, reply_markup=keyboard)
        else:
            moscow_expire_in_datetime = datetime.datetime.now(moscow_tz) + datetime.timedelta(days=int(os.getenv('NUMBER_OF_TRIAL_DAYS')))
            await add_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username, moscow_now_date)
            await add_subscribe(message.from_user.id, moscow_expire_in_datetime)
            await bot.send_message(message.from_user.id, f"""<b>{f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!" if message.from_user.username else f"–ü—Ä–∏–≤–µ—Ç!"}</b>\n\n–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>{os.getenv('NUMBER_OF_TRIAL_DAYS')} –¥–Ω–µ–π</b>""", parse_mode=ParseMode.HTML)
            await start(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìí FAQ"
@dp.message_handler(text="üìí FAQ")
async def faq_handler(message: types.Message):
    if message.chat.type == 'private':
        await deactivate_monitoring_handler(message)
        await bot.send_message(message.from_user.id, f"–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
@dp.message_handler(text="üîé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def activate_monitoring_handler(message: types.Message):
    if message.chat.type == 'private':
        monitoring_data = {key.decode('utf-8'): value.decode('utf-8') for key, value in redis_client.hgetall(f'monitoring_{message.from_user.id}').items()}
        if 'telegram_id' in monitoring_data:
            return
        moscow_now_date = datetime.datetime.now(moscow_tz)
        user = await get_user(message.from_user.id)
        if not user:
            await start(message)
            return
        subscribe = await get_subscribe(user["telegram_id"])
        if not subscribe:
            await start(message)
            return
        else:
            if subscribe["expire_in_datetime"].replace(tzinfo=moscow_tz) <= moscow_now_date:
                await start(message)
                return
        user_settings = await get_user_settings(message.from_user.id)
        redis_client.hset(
            f"monitoring_{message.from_user.id}",
            mapping = {
                "telegram_id": int(user_settings["telegram_id"]),
                "usdt_balance": int(user_settings["usdt_balance"]),
                "max_negative_reviews_bestchange": int(user_settings["max_negative_reviews_bestchange"]),
                "min_positive_reviews_bestchange": int(user_settings["min_positive_reviews_bestchange"]),
                "min_lifetime": int(user_settings["min_lifetime"]),
                "min_spread": str(user_settings["min_spread"]),
            }
        )
        redis_client.expire(f"monitoring_{message.from_user.id}", 60*60)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        await bot.send_message(message.chat.id, "üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n<i>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.</i>", parse_mode=ParseMode.HTML, reply_markup=keyboard)
        # –ñ–¥–µ–º –ø–æ–∫–∞ –Ω–µ –≤—ã–∫–ª—é—á–∏—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await asyncio.sleep(60*60)
        await deactivate_monitoring_handler(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
@dp.message_handler(text="‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def deactivate_monitoring_handler(message: types.Message):
    if message.chat.type == 'private':
        result = redis_client.hget(f'monitoring_{message.from_user.id}', 'telegram_id')
        if result:
            redis_client.delete(f'monitoring_{message.from_user.id}')
            for message_id_key in redis_client.keys(f'message_id_{message.from_user.id}:*'):
                message_id = redis_client.get(message_id_key)
                if message_id:
                    try:
                        await bot.delete_message(chat_id=message.from_user.id, message_id=int(message_id))
                        # –£–¥–∞–ª—è–µ–º message_id –∏–∑ Redis
                        redis_client.delete(message_id_key)
                    except Exception as e:
                        print(f"Error deleting message: {e}")
                        if "Message can't be deleted for everyone" in str(e):
                            # –£–¥–∞–ª—è–µ–º message_id –∏–∑ Redis
                            redis_client.delete(message_id_key)
            await bot.send_message(message.chat.id, "üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@dp.message_handler(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    if message.chat.type == 'private':
        await deactivate_monitoring_handler(message)
        user = await get_user(message.from_user.id)
        if not user:
            return
        user_settings = await get_user_settings(message.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="edit_settings:usdt_balance"))
        keyboard.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", callback_data="edit_settings:max_negative_reviews_bestchange"))
        keyboard.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", callback_data="edit_settings:min_positive_reviews_bestchange"))
        keyboard.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–≤—è–∑–∫–∏", callback_data="edit_settings:min_lifetime"))
        keyboard.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Å–ø—Ä–µ–¥", callback_data="edit_settings:min_spread"))
        await bot.send_message(message.from_user.id, 
                               f"<b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n" \
                               + f"–ë–∞–ª–∞–Ω—Å: <b>{user_settings['usdt_balance']} USDT</b>\n\n" \
                               + f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫–∞—Ö –∏–∑ BestChange: <b>{user_settings['max_negative_reviews_bestchange']} —à—Ç.</b>\n\n" \
                               + f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫–∞—Ö –∏–∑ BestChange: <b>{user_settings['min_positive_reviews_bestchange']} —à—Ç.</b>\n\n" \
                               + f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–≤—è–∑–∫–∏: <b>{user_settings['min_lifetime']} —Å–µ–∫</b>\n\n" \
                               + f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: <b>{round(float(user_settings['min_spread']), 2)} %</b>\n\n" \
                               + f"üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
                               reply_markup=keyboard,
                               parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ "edit_settings"
@dp.callback_query_handler(lambda c: c.data.startswith("edit_settings:"))
async def process_callback_edit_settings(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    variable = callback_query.data.split(":")[1]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚úñÔ∏è –û—Ç–º–µ–Ω–∞")
    if variable == "usdt_balance":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT:", reply_markup=keyboard)
        await SettingsStates.usdt_balance.set()
    elif variable == "max_negative_reviews_bestchange":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:", reply_markup=keyboard)
        await SettingsStates.max_negative_reviews_bestchange.set()
    elif variable == "min_positive_reviews_bestchange":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:", reply_markup=keyboard)
        await SettingsStates.min_positive_reviews_bestchange.set()
    elif variable == "min_lifetime":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–≤—è–∑–∫–∏:", reply_markup=keyboard)
        await SettingsStates.min_lifetime.set()
    elif variable == "min_spread":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. —Å–ø—Ä–µ–¥:", reply_markup=keyboard)
        await SettingsStates.min_spread.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ USDT
@dp.message_handler(state=SettingsStates.usdt_balance)
async def process_usdt_balance(message: types.Message, state: FSMContext):
    try:
        value = int(message.text)
        if 999999 < value or value < 0:
            0 / 0
        await update_user_settings(message.chat.id, 'usdt_balance', value)
        await state.finish()
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        await settings_handler(message)
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–º–∞–∫—Å. 999999).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
@dp.message_handler(state=SettingsStates.max_negative_reviews_bestchange)
async def process_max_negative_reviews_bestchange(message: types.Message, state: FSMContext):
    try:
        value = int(message.text)
        if 999999 < value or value < 0:
            0 / 0
        await update_user_settings(message.from_user.id, 'max_negative_reviews_bestchange', value)
        await state.finish()
        await message.answer("–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        await settings_handler(message)
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–º–∞–∫—Å. 999999).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
@dp.message_handler(state=SettingsStates.min_positive_reviews_bestchange)
async def process_min_positive_reviews_bestchange(message: types.Message, state: FSMContext):
    try:
        value = int(message.text)
        if 999999 < value or value < 0:
            0 / 0
        await update_user_settings(message.from_user.id, 'min_positive_reviews_bestchange', value)
        await state.finish()
        await message.answer("–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        await settings_handler(message)
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –º–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–º–∞–∫—Å. 999999).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∏–Ω. –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–≤—è–∑–∫–∏
@dp.message_handler(state=SettingsStates.min_lifetime)
async def process_min_lifetime(message: types.Message, state: FSMContext):
    try:
        value = int(message.text)
        if 999999 < value or value < 0:
            0 / 0
        await update_user_settings(message.from_user.id, 'min_lifetime', value)
        await state.finish()
        await message.answer("–ú–∏–Ω. –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–≤—è–∑–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        await settings_handler(message)
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –º–∏–Ω. –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–≤—è–∑–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–º–∞–∫—Å. 999999).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∏–Ω. –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–≤—è–∑–∫–∏
@dp.message_handler(state=SettingsStates.min_spread)
async def process_min_spread(message: types.Message, state: FSMContext):
    try:
        value = float(message.text.replace(',', '.'))
        if 999999.99 < value or value < 0:
            0 / 0
        await update_user_settings(message.from_user.id, 'min_spread', f"'{value}'")
        await state.finish()
        await message.answer("–ú–∏–Ω. —Å–ø—Ä–µ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.", reply_markup=main_keyboard)
        await settings_handler(message)
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –º–∏–Ω. —Å–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ —Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–º–∞–∫—Å. 999999,99).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ "go_stars"
@dp.callback_query_handler(lambda c: c.data == 'go_stars')
async def process_callback_stars(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è", callback_data="go_pay:7"), types.InlineKeyboardButton(text="2 –Ω–µ–¥–µ–ª–∏", callback_data="go_pay:14"))
    keyboard.add(types.InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="go_pay:30"), types.InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞", callback_data="go_pay:90"))
    keyboard.add(types.InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤", callback_data="go_pay:180"), types.InlineKeyboardButton(text="–ë–µ—Å—Å—Ä–æ—á–Ω–∞—è", callback_data="go_pay:-1"))
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await bot.send_message(callback_query.from_user.id, 
                           "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" \
                           + f"- 1 –Ω–µ–¥–µ–ª—è = {os.getenv(f'COST_PRICE_7')} üåü\n" \
                           + f"- 2 –Ω–µ–¥–µ–ª–∏ = {os.getenv(f'COST_PRICE_14')} üåü\n" \
                           + f"- 1 –º–µ—Å—è—Ü = {os.getenv(f'COST_PRICE_30')} üåü\n" \
                           + f"- 3 –º–µ—Å—è—Ü–∞ = {os.getenv(f'COST_PRICE_90')} üåü\n" \
                           + f"- 6 –º–µ—Å—è—Ü–µ–≤ = {os.getenv(f'COST_PRICE_180')} üåü\n" \
                           + f"- –±–µ—Å—Å—Ä–æ—á–Ω–∞—è = {os.getenv(f'COST_PRICE_-1')} üåü\n\n" \
                           + "–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞ USDT –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π - <b>@thecreatxr</b>\n\n" \
                           + "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏:", 
                           parse_mode=ParseMode.HTML,
                           reply_markup=keyboard)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ "go_pay"
@dp.callback_query_handler(lambda c: c.data.startswith("go_pay:"))
async def process_callback_pay(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
    period = int(callback_query.data.split(":")[1])
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    cost = os.getenv(f'COST_PRICE_{period}')
    if cost == None:
        return
    else:
        cost = int(cost)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {cost} ‚≠êÔ∏è", pay=True))
    prices = [types.LabeledPrice(label="XTR", amount=cost)]
    await bot.send_invoice(
        chat_id=callback_query.from_user.id,
        title="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        description=f"""{f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period} –¥–Ω–µ–π" if period > 0 else "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"}. –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} üåü""",
        prices=prices,
        provider_token="",
        payload=f"{period}",
        currency="XTR",
        reply_markup=keyboard
    )

@dp.pre_checkout_query_handler()
async def pre_checkout_handler(pre_checkout_query: types.PreCheckoutQuery):  
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: types.Message):
    period = int(message.successful_payment.invoice_payload)
    if period == -1:
        period = 182500
    moscow_expire_in_datetime = datetime.datetime.now(moscow_tz) + datetime.timedelta(days=period)
    subscribe = await update_subscribe(message.from_user.id, moscow_expire_in_datetime)
    await add_payment(message.from_user.id, "XTR", message.successful_payment.total_amount, datetime.datetime.now(moscow_tz))
    await bot.send_message(message.from_user.id, f"""üü¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscribe["expire_in_datetime"].strftime('%H:%M %d.%m.%Y')}</b>""", parse_mode=ParseMode.HTML)

async def on_startup(db):
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
    await create_tables()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    asyncio.create_task(send_profitable_deals())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    asyncio.create_task(delete_profitable_deals())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    redis_client.close()